
7SegmentDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000007ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc3  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074a  00000000  00000000  000020ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000465  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000802  00000000  00000000  00002d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_16>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	89 01       	movw	r16, r18
  6a:	8d 01       	movw	r16, r26
  6c:	91 01       	movw	r18, r2
  6e:	95 01       	movw	r18, r10
  70:	99 01       	movw	r18, r18
  72:	9d 01       	movw	r18, r26
  74:	a1 01       	movw	r20, r2
  76:	a5 01       	movw	r20, r10
  78:	a9 01       	movw	r20, r18
  7a:	ad 01       	movw	r20, r26

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 30       	cpi	r26, 0x04	; 4
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include "segments.h"

int main(void){
	uint8_t s=0,m=0,h=0,zi=0;
	/***************************************************************************************************************************************************/
	DDRD |= 0xC0;
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	80 6c       	ori	r24, 0xC0	; 192
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~0xC0;
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8f 73       	andi	r24, 0x3F	; 63
  ae:	8b b9       	out	0x0b, r24	; 11
	DDRC |= 0x3F;
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	8f 63       	ori	r24, 0x3F	; 63
  b4:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~0x3F;
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	80 7c       	andi	r24, 0xC0	; 192
  ba:	88 b9       	out	0x08, r24	; 8
	/***************************************************************************************************************************************************/
	DDRB |= 0xFF;
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0xFF;
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	85 b9       	out	0x05, r24	; 5
	/***************************************************************************************************************************************************/
	sei();
  c6:	78 94       	sei
	timer_init();
  c8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <timer_init>
	while(1){
		if(Start_timer_ON){
  cc:	4c 99       	sbic	0x09, 4	; 9
  ce:	73 c0       	rjmp	.+230    	; 0x1b6 <main+0x112>
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <main+0x120>
			s=0;m=0;h=0;zi=0;
			while(Start_timer_OF != TRUE){
				if(s>9){s=0;m++;}
  d2:	ca 30       	cpi	r28, 0x0A	; 10
  d4:	10 f0       	brcs	.+4      	; 0xda <main+0x36>
  d6:	1f 5f       	subi	r17, 0xFF	; 255
  d8:	c0 e0       	ldi	r28, 0x00	; 0
				if(m>9){m=0;h++;}
  da:	1a 30       	cpi	r17, 0x0A	; 10
  dc:	10 f0       	brcs	.+4      	; 0xe2 <main+0x3e>
  de:	df 5f       	subi	r29, 0xFF	; 255
  e0:	10 e0       	ldi	r17, 0x00	; 0
				if(h>9){h=0;zi++;}
  e2:	da 30       	cpi	r29, 0x0A	; 10
  e4:	10 f0       	brcs	.+4      	; 0xea <main+0x46>
  e6:	0f 5f       	subi	r16, 0xFF	; 255
  e8:	d0 e0       	ldi	r29, 0x00	; 0
				if(zi>9){h=0;}
  ea:	0a 30       	cpi	r16, 0x0A	; 10
  ec:	08 f4       	brcc	.+2      	; 0xf0 <main+0x4c>
  ee:	56 c0       	rjmp	.+172    	; 0x19c <main+0xf8>
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	54 c0       	rjmp	.+168    	; 0x19c <main+0xf8>
				while((timer_timeout(1) == 0)){set_digit(0);_delay_ms(1);set_digit(1);set_character(s);_delay_ms(1);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x5a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x60>
 104:	00 00       	nop
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 80 01 	call	0x300	; 0x300 <set_character>
 112:	8f e9       	ldi	r24, 0x9F	; 159
 114:	9f e0       	ldi	r25, 0x0F	; 15
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x72>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x78>
 11c:	00 00       	nop
					set_digit(0);_delay_ms(1);set_digit(2);set_character(m);_delay_ms(1);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 124:	8f e9       	ldi	r24, 0x9F	; 159
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x84>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x8a>
 12e:	00 00       	nop
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 136:	81 2f       	mov	r24, r17
 138:	0e 94 80 01 	call	0x300	; 0x300 <set_character>
 13c:	8f e9       	ldi	r24, 0x9F	; 159
 13e:	9f e0       	ldi	r25, 0x0F	; 15
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x9c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xa2>
 146:	00 00       	nop
					set_digit(0);_delay_ms(1);set_digit(3);set_character(h);_delay_ms(1);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 14e:	8f e9       	ldi	r24, 0x9F	; 159
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0xae>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xb4>
 158:	00 00       	nop
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 160:	8d 2f       	mov	r24, r29
 162:	0e 94 80 01 	call	0x300	; 0x300 <set_character>
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xc6>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xcc>
 170:	00 00       	nop
					set_digit(0);_delay_ms(1);set_digit(4);set_character(zi);_delay_ms(1);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 178:	8f e9       	ldi	r24, 0x9F	; 159
 17a:	9f e0       	ldi	r25, 0x0F	; 15
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xd8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xde>
 182:	00 00       	nop
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 18a:	80 2f       	mov	r24, r16
 18c:	0e 94 80 01 	call	0x300	; 0x300 <set_character>
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	9f e0       	ldi	r25, 0x0F	; 15
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0xf0>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xf6>
 19a:	00 00       	nop
			while(Start_timer_OF != TRUE){
				if(s>9){s=0;m++;}
				if(m>9){m=0;h++;}
				if(h>9){h=0;zi++;}
				if(zi>9){h=0;}
				while((timer_timeout(1) == 0)){set_digit(0);_delay_ms(1);set_digit(1);set_character(s);_delay_ms(1);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <timer_timeout>
 1a8:	88 23       	and	r24, r24
 1aa:	09 f4       	brne	.+2      	; 0x1ae <main+0x10a>
 1ac:	a3 cf       	rjmp	.-186    	; 0xf4 <main+0x50>
					set_digit(0);_delay_ms(1);set_digit(2);set_character(m);_delay_ms(1);
					set_digit(0);_delay_ms(1);set_digit(3);set_character(h);_delay_ms(1);
					set_digit(0);_delay_ms(1);set_digit(4);set_character(zi);_delay_ms(1);
				}timer_reset_tacts();
 1ae:	0e 94 4f 02 	call	0x49e	; 0x49e <timer_reset_tacts>
				s+=1;
 1b2:	cf 5f       	subi	r28, 0xFF	; 255
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <main+0x11a>
 1b6:	00 e0       	ldi	r16, 0x00	; 0
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
	sei();
	timer_init();
	while(1){
		if(Start_timer_ON){
			s=0;m=0;h=0;zi=0;
			while(Start_timer_OF != TRUE){
 1be:	4c 99       	sbic	0x09, 4	; 9
 1c0:	88 cf       	rjmp	.-240    	; 0xd2 <main+0x2e>
 1c2:	84 cf       	rjmp	.-248    	; 0xcc <main+0x28>
				}timer_reset_tacts();
				s+=1;
			}
		}
		else {
			set_digit(0);_delay_ms(1);set_digit(1);set_character(0);_delay_ms(1);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 1ca:	8f e9       	ldi	r24, 0x9F	; 159
 1cc:	9f e0       	ldi	r25, 0x0F	; 15
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x12a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x130>
 1d4:	00 00       	nop
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 80 01 	call	0x300	; 0x300 <set_character>
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x142>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x148>
 1ec:	00 00       	nop
			set_digit(0);_delay_ms(1);set_digit(2);set_character(0);_delay_ms(1);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x154>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x15a>
 1fe:	00 00       	nop
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 80 01 	call	0x300	; 0x300 <set_character>
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x16c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x172>
 216:	00 00       	nop
			set_digit(0);_delay_ms(1);set_digit(3);set_character(0);_delay_ms(1);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 21e:	8f e9       	ldi	r24, 0x9F	; 159
 220:	9f e0       	ldi	r25, 0x0F	; 15
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0x17e>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x184>
 228:	00 00       	nop
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 80 01 	call	0x300	; 0x300 <set_character>
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x196>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x19c>
 240:	00 00       	nop
			set_digit(0);_delay_ms(1);set_digit(4);set_character(0);_delay_ms(1);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 248:	8f e9       	ldi	r24, 0x9F	; 159
 24a:	9f e0       	ldi	r25, 0x0F	; 15
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x1a8>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x1ae>
 252:	00 00       	nop
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	0e 94 b1 01 	call	0x362	; 0x362 <set_digit>
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 80 01 	call	0x300	; 0x300 <set_character>
 260:	8f e9       	ldi	r24, 0x9F	; 159
 262:	9f e0       	ldi	r25, 0x0F	; 15
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x1c0>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x1c6>
 26a:	00 00       	nop
 26c:	2f cf       	rjmp	.-418    	; 0xcc <main+0x28>

0000026e <set_segment>:
#include "segments.h"

/***************************************************************************************************************************************************/
void set_segment(char x){
	/****Hexadecimal***********************************************************Binary****/
	if ((x & 0x01) == 0x01) SEGMENTS_1_PORT|=(1<<SEGMENT_ONE_BIT);            // 0000 0001                     
 26e:	80 ff       	sbrs	r24, 0
 270:	04 c0       	rjmp	.+8      	; 0x27a <set_segment+0xc>
 272:	98 b1       	in	r25, 0x08	; 8
 274:	91 60       	ori	r25, 0x01	; 1
 276:	98 b9       	out	0x08, r25	; 8
 278:	03 c0       	rjmp	.+6      	; 0x280 <set_segment+0x12>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_ONE_BIT);
 27a:	98 b1       	in	r25, 0x08	; 8
 27c:	9e 7f       	andi	r25, 0xFE	; 254
 27e:	98 b9       	out	0x08, r25	; 8
	if ((x & 0x02) == 0x02) SEGMENTS_1_PORT|=(1<<SEGMENT_TWO_BIT);            // 0000 0010
 280:	81 ff       	sbrs	r24, 1
 282:	04 c0       	rjmp	.+8      	; 0x28c <set_segment+0x1e>
 284:	98 b1       	in	r25, 0x08	; 8
 286:	92 60       	ori	r25, 0x02	; 2
 288:	98 b9       	out	0x08, r25	; 8
 28a:	03 c0       	rjmp	.+6      	; 0x292 <set_segment+0x24>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_TWO_BIT);
 28c:	98 b1       	in	r25, 0x08	; 8
 28e:	9d 7f       	andi	r25, 0xFD	; 253
 290:	98 b9       	out	0x08, r25	; 8
	if ((x & 0x04) == 0x04) SEGMENTS_1_PORT|=(1<<DOT_BIT);                    // 0000 0100
 292:	82 ff       	sbrs	r24, 2
 294:	04 c0       	rjmp	.+8      	; 0x29e <set_segment+0x30>
 296:	98 b1       	in	r25, 0x08	; 8
 298:	94 60       	ori	r25, 0x04	; 4
 29a:	98 b9       	out	0x08, r25	; 8
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <set_segment+0x36>
	else SEGMENTS_1_PORT&=~(1<<DOT_BIT);
 29e:	98 b1       	in	r25, 0x08	; 8
 2a0:	9b 7f       	andi	r25, 0xFB	; 251
 2a2:	98 b9       	out	0x08, r25	; 8
	if ((x & 0x08) == 0x08) SEGMENTS_1_PORT|=(1<<SEGMENT_FOUR_BIT);           // 0000 1000
 2a4:	83 ff       	sbrs	r24, 3
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <set_segment+0x42>
 2a8:	98 b1       	in	r25, 0x08	; 8
 2aa:	98 60       	ori	r25, 0x08	; 8
 2ac:	98 b9       	out	0x08, r25	; 8
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <set_segment+0x48>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_FOUR_BIT);
 2b0:	98 b1       	in	r25, 0x08	; 8
 2b2:	97 7f       	andi	r25, 0xF7	; 247
 2b4:	98 b9       	out	0x08, r25	; 8
	if ((x & 0x10) == 0x10) SEGMENTS_1_PORT|=(1<<SEGMENT_FIVE_BIT);           // 0001 0000
 2b6:	84 ff       	sbrs	r24, 4
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <set_segment+0x54>
 2ba:	98 b1       	in	r25, 0x08	; 8
 2bc:	90 61       	ori	r25, 0x10	; 16
 2be:	98 b9       	out	0x08, r25	; 8
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <set_segment+0x5a>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_FIVE_BIT);
 2c2:	98 b1       	in	r25, 0x08	; 8
 2c4:	9f 7e       	andi	r25, 0xEF	; 239
 2c6:	98 b9       	out	0x08, r25	; 8
	if ((x & 0x20) == 0x20) SEGMENTS_1_PORT|=(1<<SEGMENT_SEVEN_BIT);          // 0010 0000
 2c8:	85 ff       	sbrs	r24, 5
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <set_segment+0x66>
 2cc:	98 b1       	in	r25, 0x08	; 8
 2ce:	90 62       	ori	r25, 0x20	; 32
 2d0:	98 b9       	out	0x08, r25	; 8
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <set_segment+0x6c>
	else SEGMENTS_1_PORT&=~(1<<SEGMENT_SEVEN_BIT);
 2d4:	98 b1       	in	r25, 0x08	; 8
 2d6:	9f 7d       	andi	r25, 0xDF	; 223
 2d8:	98 b9       	out	0x08, r25	; 8
	if ((x & 0x40) == 0x40) SEGMENTS_2_PORT|=(1<<SEGMENT_TEN_BIT);            // 0100 0000
 2da:	86 ff       	sbrs	r24, 6
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <set_segment+0x78>
 2de:	9b b1       	in	r25, 0x0b	; 11
 2e0:	90 64       	ori	r25, 0x40	; 64
 2e2:	9b b9       	out	0x0b, r25	; 11
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <set_segment+0x7e>
	else SEGMENTS_2_PORT&=~(1<<SEGMENT_TEN_BIT);
 2e6:	9b b1       	in	r25, 0x0b	; 11
 2e8:	9f 7b       	andi	r25, 0xBF	; 191
 2ea:	9b b9       	out	0x0b, r25	; 11
	if ((x & 0x80) == 0x80) SEGMENTS_2_PORT|=(1<<SEGMENT_ELEVEN_BIT);         // 1000 0000
 2ec:	88 23       	and	r24, r24
 2ee:	24 f4       	brge	.+8      	; 0x2f8 <set_segment+0x8a>
 2f0:	8b b1       	in	r24, 0x0b	; 11
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	8b b9       	out	0x0b, r24	; 11
 2f6:	08 95       	ret
    else SEGMENTS_2_PORT&=~(1<<SEGMENT_ELEVEN_BIT);}
 2f8:	8b b1       	in	r24, 0x0b	; 11
 2fa:	8f 77       	andi	r24, 0x7F	; 127
 2fc:	8b b9       	out	0x0b, r24	; 11
 2fe:	08 95       	ret

00000300 <set_character>:
/***************************************************************************************************************************************************/

void set_character(char x){
	switch(x){
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	8a 30       	cpi	r24, 0x0A	; 10
 304:	91 05       	cpc	r25, r1
 306:	60 f5       	brcc	.+88     	; 0x360 <set_character+0x60>
 308:	fc 01       	movw	r30, r24
 30a:	ec 5c       	subi	r30, 0xCC	; 204
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__tablejump2__>
		/*****************Hexadecimal****************************************Binary****/
		case 0:  set_segment(0xEF);break;                                   // 1110 1111 for character "0"
 312:	8f ee       	ldi	r24, 0xEF	; 239
 314:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 318:	08 95       	ret
		case 1:  set_segment(0x2C);break;                                   // 0010 1100 for character "1"
 31a:	8c e2       	ldi	r24, 0x2C	; 44
 31c:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 320:	08 95       	ret
		case 2:  set_segment(0xB7);break;                                   // 1011 0111 for character "2"
 322:	87 eb       	ldi	r24, 0xB7	; 183
 324:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 328:	08 95       	ret
		case 3:  set_segment(0xBE);break;                                   // 1011 1110 for character "3"
 32a:	8e eb       	ldi	r24, 0xBE	; 190
 32c:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 330:	08 95       	ret
		case 4:  set_segment(0x7C);break;                                   // 0111 1100 for character "4"
 332:	8c e7       	ldi	r24, 0x7C	; 124
 334:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 338:	08 95       	ret
		case 5:  set_segment(0xDE);break;                                   // 1101 1110 for character "5"
 33a:	8e ed       	ldi	r24, 0xDE	; 222
 33c:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 340:	08 95       	ret
		case 6:  set_segment(0xDF);break;                                   // 1101 1111 for character "6"
 342:	8f ed       	ldi	r24, 0xDF	; 223
 344:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 348:	08 95       	ret
		case 7:  set_segment(0xAC);break;                                   // 1010 1100 for character "7"
 34a:	8c ea       	ldi	r24, 0xAC	; 172
 34c:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 350:	08 95       	ret
		case 8:  set_segment(0xFF);break;                                   // 1111 1111 for character "8"
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 358:	08 95       	ret
		case 9:  set_segment(0xFE);break;                                   // 1111 1110 for character "9"
 35a:	8e ef       	ldi	r24, 0xFE	; 254
 35c:	0e 94 37 01 	call	0x26e	; 0x26e <set_segment>
 360:	08 95       	ret

00000362 <set_digit>:
		
	}
}
/***************************************************************************************************************************************************/
void set_digit(char x){
	switch(x){
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	29 f1       	breq	.+74     	; 0x3b0 <set_digit+0x4e>
 366:	28 f4       	brcc	.+10     	; 0x372 <set_digit+0x10>
 368:	88 23       	and	r24, r24
 36a:	41 f0       	breq	.+16     	; 0x37c <set_digit+0x1a>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	99 f0       	breq	.+38     	; 0x396 <set_digit+0x34>
 370:	08 95       	ret
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	51 f1       	breq	.+84     	; 0x3ca <set_digit+0x68>
 376:	84 30       	cpi	r24, 0x04	; 4
 378:	a9 f1       	breq	.+106    	; 0x3e4 <set_digit+0x82>
 37a:	08 95       	ret
		/**********************************************SET ALL COMMON CATHODE TO GROUND*************************************************************/
		case 0: GROUND_PORT|= (1<<DIGIT_4_BIT); GROUND_PORT|= (1<<DIGIT_1_BIT); GROUND_PORT|= (1<<DIGIT_2_BIT); GROUND_PORT|= (1<<DIGIT_3_BIT);break;
 37c:	85 b1       	in	r24, 0x05	; 5
 37e:	80 61       	ori	r24, 0x10	; 16
 380:	85 b9       	out	0x05, r24	; 5
 382:	85 b1       	in	r24, 0x05	; 5
 384:	82 60       	ori	r24, 0x02	; 2
 386:	85 b9       	out	0x05, r24	; 5
 388:	85 b1       	in	r24, 0x05	; 5
 38a:	84 60       	ori	r24, 0x04	; 4
 38c:	85 b9       	out	0x05, r24	; 5
 38e:	85 b1       	in	r24, 0x05	; 5
 390:	88 60       	ori	r24, 0x08	; 8
 392:	85 b9       	out	0x05, r24	; 5
 394:	08 95       	ret
		/*******************************************************************************************************************************************/
		
		/**************************************************SET DIGIT 1 TO GROUND********************************************************************/
		case 1: GROUND_PORT&=~(1<<DIGIT_1_BIT);  GROUND_PORT|= (1<<DIGIT_4_BIT); GROUND_PORT|= (1<<DIGIT_2_BIT); GROUND_PORT|= (1<<DIGIT_3_BIT);break; 
 396:	85 b1       	in	r24, 0x05	; 5
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	85 b9       	out	0x05, r24	; 5
 39c:	85 b1       	in	r24, 0x05	; 5
 39e:	80 61       	ori	r24, 0x10	; 16
 3a0:	85 b9       	out	0x05, r24	; 5
 3a2:	85 b1       	in	r24, 0x05	; 5
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	85 b9       	out	0x05, r24	; 5
 3a8:	85 b1       	in	r24, 0x05	; 5
 3aa:	88 60       	ori	r24, 0x08	; 8
 3ac:	85 b9       	out	0x05, r24	; 5
 3ae:	08 95       	ret
		/*******************************************************************************************************************************************/  
		
		/**************************************************SET DIGIT 2 TO GROUND********************************************************************/
  		case 2: GROUND_PORT&=~(1<<DIGIT_2_BIT);  GROUND_PORT|= (1<<DIGIT_4_BIT); GROUND_PORT|= (1<<DIGIT_1_BIT); GROUND_PORT|= (1<<DIGIT_3_BIT);break;
 3b0:	85 b1       	in	r24, 0x05	; 5
 3b2:	8b 7f       	andi	r24, 0xFB	; 251
 3b4:	85 b9       	out	0x05, r24	; 5
 3b6:	85 b1       	in	r24, 0x05	; 5
 3b8:	80 61       	ori	r24, 0x10	; 16
 3ba:	85 b9       	out	0x05, r24	; 5
 3bc:	85 b1       	in	r24, 0x05	; 5
 3be:	82 60       	ori	r24, 0x02	; 2
 3c0:	85 b9       	out	0x05, r24	; 5
 3c2:	85 b1       	in	r24, 0x05	; 5
 3c4:	88 60       	ori	r24, 0x08	; 8
 3c6:	85 b9       	out	0x05, r24	; 5
 3c8:	08 95       	ret
		/*******************************************************************************************************************************************/
		
		/**************************************************SET DIGIT 3 TO GROUND********************************************************************/
		case 3: GROUND_PORT&=~(1<<DIGIT_3_BIT);  GROUND_PORT|= (1<<DIGIT_4_BIT); GROUND_PORT|= (1<<DIGIT_1_BIT); GROUND_PORT|= (1<<DIGIT_2_BIT);break;
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	87 7f       	andi	r24, 0xF7	; 247
 3ce:	85 b9       	out	0x05, r24	; 5
 3d0:	85 b1       	in	r24, 0x05	; 5
 3d2:	80 61       	ori	r24, 0x10	; 16
 3d4:	85 b9       	out	0x05, r24	; 5
 3d6:	85 b1       	in	r24, 0x05	; 5
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	85 b9       	out	0x05, r24	; 5
 3dc:	85 b1       	in	r24, 0x05	; 5
 3de:	84 60       	ori	r24, 0x04	; 4
 3e0:	85 b9       	out	0x05, r24	; 5
 3e2:	08 95       	ret
		/*******************************************************************************************************************************************/
		
		/**************************************************SET DIGIT 4 TO GROUND********************************************************************/
		case 4: GROUND_PORT&=~(1<<DIGIT_4_BIT);  GROUND_PORT|= (1<<DIGIT_1_BIT); GROUND_PORT|= (1<<DIGIT_2_BIT); GROUND_PORT|= (1<<DIGIT_3_BIT);break;
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	8f 7e       	andi	r24, 0xEF	; 239
 3e8:	85 b9       	out	0x05, r24	; 5
 3ea:	85 b1       	in	r24, 0x05	; 5
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	85 b9       	out	0x05, r24	; 5
 3f0:	85 b1       	in	r24, 0x05	; 5
 3f2:	84 60       	ori	r24, 0x04	; 4
 3f4:	85 b9       	out	0x05, r24	; 5
 3f6:	85 b1       	in	r24, 0x05	; 5
 3f8:	88 60       	ori	r24, 0x08	; 8
 3fa:	85 b9       	out	0x05, r24	; 5
 3fc:	08 95       	ret

000003fe <timer_init>:

volatile uint32_t timer_tacts_passed;
/****************************************************************************************************************************/
void timer_init()
{
	timer_tacts_passed = 0;
 3fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 402:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 406:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 40a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	TCCR0B	|= (1 << CS02) | (1 << CS00);   //prescaler 1024
 40e:	85 b5       	in	r24, 0x25	; 37
 410:	85 60       	ori	r24, 0x05	; 5
 412:	85 bd       	out	0x25, r24	; 37
	TIFR0	|= ( 1<<TOV0 );
 414:	85 b3       	in	r24, 0x15	; 21
 416:	81 60       	ori	r24, 0x01	; 1
 418:	85 bb       	out	0x15, r24	; 21
	TIMSK0	|= ( 1<<TOIE0 );
 41a:	ee e6       	ldi	r30, 0x6E	; 110
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	81 60       	ori	r24, 0x01	; 1
 422:	80 83       	st	Z, r24
 424:	08 95       	ret

00000426 <__vector_16>:
}
/****************************************************************************************************************************/
ISR(TIMER0_OVF_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	af 93       	push	r26
 438:	bf 93       	push	r27
	timer_tacts_passed++;
 43a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 442:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 446:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	a1 1d       	adc	r26, r1
 44e:	b1 1d       	adc	r27, r1
 450:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 454:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 458:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 45c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	if (timer_tacts_passed == UINT32_MAX)
 460:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 464:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 468:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 46c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 470:	8f 3f       	cpi	r24, 0xFF	; 255
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	af 4f       	sbci	r26, 0xFF	; 255
 476:	bf 4f       	sbci	r27, 0xFF	; 255
 478:	41 f4       	brne	.+16     	; 0x48a <__vector_16+0x64>
	{
		timer_tacts_passed = 0;
 47a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 47e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 482:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 486:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	}
}
 48a:	bf 91       	pop	r27
 48c:	af 91       	pop	r26
 48e:	9f 91       	pop	r25
 490:	8f 91       	pop	r24
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <timer_reset_tacts>:
/****************************************************************************************************************************/
void timer_reset_tacts()
{
	timer_tacts_passed = 0;
 49e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4a6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 4aa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 4ae:	08 95       	ret

000004b0 <timer_timeout>:
}
/****************************************************************************************************************************/
char timer_timeout( uint32_t seconds )
{
 4b0:	8f 92       	push	r8
 4b2:	9f 92       	push	r9
 4b4:	af 92       	push	r10
 4b6:	bf 92       	push	r11
 4b8:	cf 92       	push	r12
 4ba:	df 92       	push	r13
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	4b 01       	movw	r8, r22
 4c2:	5c 01       	movw	r10, r24
	if( (float)timer_tacts_passed / (float)TIMER_TACTS_PER_SECOND >= (float)seconds ) return 1;
 4c4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4c8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 4d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 4d4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatunsisf>
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	44 e7       	ldi	r20, 0x74	; 116
 4de:	52 e4       	ldi	r21, 0x42	; 66
 4e0:	0e 94 8c 02 	call	0x518	; 0x518 <__divsf3>
 4e4:	6b 01       	movw	r12, r22
 4e6:	7c 01       	movw	r14, r24
 4e8:	c5 01       	movw	r24, r10
 4ea:	b4 01       	movw	r22, r8
 4ec:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatunsisf>
 4f0:	9b 01       	movw	r18, r22
 4f2:	ac 01       	movw	r20, r24
 4f4:	c7 01       	movw	r24, r14
 4f6:	b6 01       	movw	r22, r12
 4f8:	0e 94 8c 03 	call	0x718	; 0x718 <__gesf2>
 4fc:	88 23       	and	r24, r24
 4fe:	14 f0       	brlt	.+4      	; 0x504 <timer_timeout+0x54>
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	01 c0       	rjmp	.+2      	; 0x506 <timer_timeout+0x56>
	
	return 0;
 504:	80 e0       	ldi	r24, 0x00	; 0
}
 506:	ff 90       	pop	r15
 508:	ef 90       	pop	r14
 50a:	df 90       	pop	r13
 50c:	cf 90       	pop	r12
 50e:	bf 90       	pop	r11
 510:	af 90       	pop	r10
 512:	9f 90       	pop	r9
 514:	8f 90       	pop	r8
 516:	08 95       	ret

00000518 <__divsf3>:
 518:	0e 94 a0 02 	call	0x540	; 0x540 <__divsf3x>
 51c:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_round>
 520:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_pscB>
 524:	58 f0       	brcs	.+22     	; 0x53c <__divsf3+0x24>
 526:	0e 94 44 03 	call	0x688	; 0x688 <__fp_pscA>
 52a:	40 f0       	brcs	.+16     	; 0x53c <__divsf3+0x24>
 52c:	29 f4       	brne	.+10     	; 0x538 <__divsf3+0x20>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	29 f0       	breq	.+10     	; 0x53c <__divsf3+0x24>
 532:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_inf>
 536:	51 11       	cpse	r21, r1
 538:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_szero>
 53c:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_nan>

00000540 <__divsf3x>:
 540:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_split3>
 544:	68 f3       	brcs	.-38     	; 0x520 <__divsf3+0x8>

00000546 <__divsf3_pse>:
 546:	99 23       	and	r25, r25
 548:	b1 f3       	breq	.-20     	; 0x536 <__divsf3+0x1e>
 54a:	55 23       	and	r21, r21
 54c:	91 f3       	breq	.-28     	; 0x532 <__divsf3+0x1a>
 54e:	95 1b       	sub	r25, r21
 550:	55 0b       	sbc	r21, r21
 552:	bb 27       	eor	r27, r27
 554:	aa 27       	eor	r26, r26
 556:	62 17       	cp	r22, r18
 558:	73 07       	cpc	r23, r19
 55a:	84 07       	cpc	r24, r20
 55c:	38 f0       	brcs	.+14     	; 0x56c <__divsf3_pse+0x26>
 55e:	9f 5f       	subi	r25, 0xFF	; 255
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	44 1f       	adc	r20, r20
 568:	aa 1f       	adc	r26, r26
 56a:	a9 f3       	breq	.-22     	; 0x556 <__divsf3_pse+0x10>
 56c:	35 d0       	rcall	.+106    	; 0x5d8 <__divsf3_pse+0x92>
 56e:	0e 2e       	mov	r0, r30
 570:	3a f0       	brmi	.+14     	; 0x580 <__divsf3_pse+0x3a>
 572:	e0 e8       	ldi	r30, 0x80	; 128
 574:	32 d0       	rcall	.+100    	; 0x5da <__divsf3_pse+0x94>
 576:	91 50       	subi	r25, 0x01	; 1
 578:	50 40       	sbci	r21, 0x00	; 0
 57a:	e6 95       	lsr	r30
 57c:	00 1c       	adc	r0, r0
 57e:	ca f7       	brpl	.-14     	; 0x572 <__divsf3_pse+0x2c>
 580:	2b d0       	rcall	.+86     	; 0x5d8 <__divsf3_pse+0x92>
 582:	fe 2f       	mov	r31, r30
 584:	29 d0       	rcall	.+82     	; 0x5d8 <__divsf3_pse+0x92>
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	bb 1f       	adc	r27, r27
 58e:	26 17       	cp	r18, r22
 590:	37 07       	cpc	r19, r23
 592:	48 07       	cpc	r20, r24
 594:	ab 07       	cpc	r26, r27
 596:	b0 e8       	ldi	r27, 0x80	; 128
 598:	09 f0       	breq	.+2      	; 0x59c <__divsf3_pse+0x56>
 59a:	bb 0b       	sbc	r27, r27
 59c:	80 2d       	mov	r24, r0
 59e:	bf 01       	movw	r22, r30
 5a0:	ff 27       	eor	r31, r31
 5a2:	93 58       	subi	r25, 0x83	; 131
 5a4:	5f 4f       	sbci	r21, 0xFF	; 255
 5a6:	3a f0       	brmi	.+14     	; 0x5b6 <__divsf3_pse+0x70>
 5a8:	9e 3f       	cpi	r25, 0xFE	; 254
 5aa:	51 05       	cpc	r21, r1
 5ac:	78 f0       	brcs	.+30     	; 0x5cc <__divsf3_pse+0x86>
 5ae:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_inf>
 5b2:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_szero>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	e4 f3       	brlt	.-8      	; 0x5b2 <__divsf3_pse+0x6c>
 5ba:	98 3e       	cpi	r25, 0xE8	; 232
 5bc:	d4 f3       	brlt	.-12     	; 0x5b2 <__divsf3_pse+0x6c>
 5be:	86 95       	lsr	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b7 95       	ror	r27
 5c6:	f7 95       	ror	r31
 5c8:	9f 5f       	subi	r25, 0xFF	; 255
 5ca:	c9 f7       	brne	.-14     	; 0x5be <__divsf3_pse+0x78>
 5cc:	88 0f       	add	r24, r24
 5ce:	91 1d       	adc	r25, r1
 5d0:	96 95       	lsr	r25
 5d2:	87 95       	ror	r24
 5d4:	97 f9       	bld	r25, 7
 5d6:	08 95       	ret
 5d8:	e1 e0       	ldi	r30, 0x01	; 1
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	bb 1f       	adc	r27, r27
 5e2:	62 17       	cp	r22, r18
 5e4:	73 07       	cpc	r23, r19
 5e6:	84 07       	cpc	r24, r20
 5e8:	ba 07       	cpc	r27, r26
 5ea:	20 f0       	brcs	.+8      	; 0x5f4 <__divsf3_pse+0xae>
 5ec:	62 1b       	sub	r22, r18
 5ee:	73 0b       	sbc	r23, r19
 5f0:	84 0b       	sbc	r24, r20
 5f2:	ba 0b       	sbc	r27, r26
 5f4:	ee 1f       	adc	r30, r30
 5f6:	88 f7       	brcc	.-30     	; 0x5da <__divsf3_pse+0x94>
 5f8:	e0 95       	com	r30
 5fa:	08 95       	ret

000005fc <__floatunsisf>:
 5fc:	e8 94       	clt
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <__floatsisf+0x12>

00000600 <__floatsisf>:
 600:	97 fb       	bst	r25, 7
 602:	3e f4       	brtc	.+14     	; 0x612 <__floatsisf+0x12>
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	99 23       	and	r25, r25
 614:	a9 f0       	breq	.+42     	; 0x640 <__floatsisf+0x40>
 616:	f9 2f       	mov	r31, r25
 618:	96 e9       	ldi	r25, 0x96	; 150
 61a:	bb 27       	eor	r27, r27
 61c:	93 95       	inc	r25
 61e:	f6 95       	lsr	r31
 620:	87 95       	ror	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f1 11       	cpse	r31, r1
 62a:	f8 cf       	rjmp	.-16     	; 0x61c <__floatsisf+0x1c>
 62c:	fa f4       	brpl	.+62     	; 0x66c <__floatsisf+0x6c>
 62e:	bb 0f       	add	r27, r27
 630:	11 f4       	brne	.+4      	; 0x636 <__floatsisf+0x36>
 632:	60 ff       	sbrs	r22, 0
 634:	1b c0       	rjmp	.+54     	; 0x66c <__floatsisf+0x6c>
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	16 c0       	rjmp	.+44     	; 0x66c <__floatsisf+0x6c>
 640:	88 23       	and	r24, r24
 642:	11 f0       	breq	.+4      	; 0x648 <__floatsisf+0x48>
 644:	96 e9       	ldi	r25, 0x96	; 150
 646:	11 c0       	rjmp	.+34     	; 0x66a <__floatsisf+0x6a>
 648:	77 23       	and	r23, r23
 64a:	21 f0       	breq	.+8      	; 0x654 <__floatsisf+0x54>
 64c:	9e e8       	ldi	r25, 0x8E	; 142
 64e:	87 2f       	mov	r24, r23
 650:	76 2f       	mov	r23, r22
 652:	05 c0       	rjmp	.+10     	; 0x65e <__floatsisf+0x5e>
 654:	66 23       	and	r22, r22
 656:	71 f0       	breq	.+28     	; 0x674 <__floatsisf+0x74>
 658:	96 e8       	ldi	r25, 0x86	; 134
 65a:	86 2f       	mov	r24, r22
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	2a f0       	brmi	.+10     	; 0x66c <__floatsisf+0x6c>
 662:	9a 95       	dec	r25
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	da f7       	brpl	.-10     	; 0x662 <__floatsisf+0x62>
 66c:	88 0f       	add	r24, r24
 66e:	96 95       	lsr	r25
 670:	87 95       	ror	r24
 672:	97 f9       	bld	r25, 7
 674:	08 95       	ret

00000676 <__fp_inf>:
 676:	97 f9       	bld	r25, 7
 678:	9f 67       	ori	r25, 0x7F	; 127
 67a:	80 e8       	ldi	r24, 0x80	; 128
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	08 95       	ret

00000682 <__fp_nan>:
 682:	9f ef       	ldi	r25, 0xFF	; 255
 684:	80 ec       	ldi	r24, 0xC0	; 192
 686:	08 95       	ret

00000688 <__fp_pscA>:
 688:	00 24       	eor	r0, r0
 68a:	0a 94       	dec	r0
 68c:	16 16       	cp	r1, r22
 68e:	17 06       	cpc	r1, r23
 690:	18 06       	cpc	r1, r24
 692:	09 06       	cpc	r0, r25
 694:	08 95       	ret

00000696 <__fp_pscB>:
 696:	00 24       	eor	r0, r0
 698:	0a 94       	dec	r0
 69a:	12 16       	cp	r1, r18
 69c:	13 06       	cpc	r1, r19
 69e:	14 06       	cpc	r1, r20
 6a0:	05 06       	cpc	r0, r21
 6a2:	08 95       	ret

000006a4 <__fp_round>:
 6a4:	09 2e       	mov	r0, r25
 6a6:	03 94       	inc	r0
 6a8:	00 0c       	add	r0, r0
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <__fp_round+0xc>
 6ac:	88 23       	and	r24, r24
 6ae:	52 f0       	brmi	.+20     	; 0x6c4 <__fp_round+0x20>
 6b0:	bb 0f       	add	r27, r27
 6b2:	40 f4       	brcc	.+16     	; 0x6c4 <__fp_round+0x20>
 6b4:	bf 2b       	or	r27, r31
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__fp_round+0x18>
 6b8:	60 ff       	sbrs	r22, 0
 6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <__fp_round+0x20>
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	08 95       	ret

000006c6 <__fp_split3>:
 6c6:	57 fd       	sbrc	r21, 7
 6c8:	90 58       	subi	r25, 0x80	; 128
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	59 f0       	breq	.+22     	; 0x6e6 <__fp_splitA+0x10>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	71 f0       	breq	.+28     	; 0x6f0 <__fp_splitA+0x1a>
 6d4:	47 95       	ror	r20

000006d6 <__fp_splitA>:
 6d6:	88 0f       	add	r24, r24
 6d8:	97 fb       	bst	r25, 7
 6da:	99 1f       	adc	r25, r25
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <__fp_splitA+0x20>
 6de:	9f 3f       	cpi	r25, 0xFF	; 255
 6e0:	79 f0       	breq	.+30     	; 0x700 <__fp_splitA+0x2a>
 6e2:	87 95       	ror	r24
 6e4:	08 95       	ret
 6e6:	12 16       	cp	r1, r18
 6e8:	13 06       	cpc	r1, r19
 6ea:	14 06       	cpc	r1, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	f2 cf       	rjmp	.-28     	; 0x6d4 <__fp_split3+0xe>
 6f0:	46 95       	lsr	r20
 6f2:	f1 df       	rcall	.-30     	; 0x6d6 <__fp_splitA>
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <__fp_splitA+0x30>
 6f6:	16 16       	cp	r1, r22
 6f8:	17 06       	cpc	r1, r23
 6fa:	18 06       	cpc	r1, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	f1 cf       	rjmp	.-30     	; 0x6e2 <__fp_splitA+0xc>
 700:	86 95       	lsr	r24
 702:	71 05       	cpc	r23, r1
 704:	61 05       	cpc	r22, r1
 706:	08 94       	sec
 708:	08 95       	ret

0000070a <__fp_zero>:
 70a:	e8 94       	clt

0000070c <__fp_szero>:
 70c:	bb 27       	eor	r27, r27
 70e:	66 27       	eor	r22, r22
 710:	77 27       	eor	r23, r23
 712:	cb 01       	movw	r24, r22
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret

00000718 <__gesf2>:
 718:	0e 94 91 03 	call	0x722	; 0x722 <__fp_cmp>
 71c:	08 f4       	brcc	.+2      	; 0x720 <__gesf2+0x8>
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	08 95       	ret

00000722 <__fp_cmp>:
 722:	99 0f       	add	r25, r25
 724:	00 08       	sbc	r0, r0
 726:	55 0f       	add	r21, r21
 728:	aa 0b       	sbc	r26, r26
 72a:	e0 e8       	ldi	r30, 0x80	; 128
 72c:	fe ef       	ldi	r31, 0xFE	; 254
 72e:	16 16       	cp	r1, r22
 730:	17 06       	cpc	r1, r23
 732:	e8 07       	cpc	r30, r24
 734:	f9 07       	cpc	r31, r25
 736:	c0 f0       	brcs	.+48     	; 0x768 <__fp_cmp+0x46>
 738:	12 16       	cp	r1, r18
 73a:	13 06       	cpc	r1, r19
 73c:	e4 07       	cpc	r30, r20
 73e:	f5 07       	cpc	r31, r21
 740:	98 f0       	brcs	.+38     	; 0x768 <__fp_cmp+0x46>
 742:	62 1b       	sub	r22, r18
 744:	73 0b       	sbc	r23, r19
 746:	84 0b       	sbc	r24, r20
 748:	95 0b       	sbc	r25, r21
 74a:	39 f4       	brne	.+14     	; 0x75a <__fp_cmp+0x38>
 74c:	0a 26       	eor	r0, r26
 74e:	61 f0       	breq	.+24     	; 0x768 <__fp_cmp+0x46>
 750:	23 2b       	or	r18, r19
 752:	24 2b       	or	r18, r20
 754:	25 2b       	or	r18, r21
 756:	21 f4       	brne	.+8      	; 0x760 <__fp_cmp+0x3e>
 758:	08 95       	ret
 75a:	0a 26       	eor	r0, r26
 75c:	09 f4       	brne	.+2      	; 0x760 <__fp_cmp+0x3e>
 75e:	a1 40       	sbci	r26, 0x01	; 1
 760:	a6 95       	lsr	r26
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	81 1d       	adc	r24, r1
 766:	81 1d       	adc	r24, r1
 768:	08 95       	ret

0000076a <__tablejump2__>:
 76a:	ee 0f       	add	r30, r30
 76c:	ff 1f       	adc	r31, r31
 76e:	05 90       	lpm	r0, Z+
 770:	f4 91       	lpm	r31, Z
 772:	e0 2d       	mov	r30, r0
 774:	09 94       	ijmp

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
